

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Oct 27 10:27:58 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Generated 23/03/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4620 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     
    57                           	psect	idataCOMRAM
    58   0016B2                     __pidataCOMRAM:
    59                           	callstack 0
    60                           
    61                           ;initializer for _lat_reg
    62   0016B2  89                 	db	137
    63   0016B3  0F                 	db	15
    64   0016B4  8A                 	db	138
    65   0016B5  0F                 	db	15
    66   0016B6  8B                 	db	139
    67   0016B7  0F                 	db	15
    68   0016B8  00                 	db	0
    69   0016B9  00                 	db	0
    70   0016BA  00                 	db	0
    71   0016BB  00                 	db	0
    72                           
    73                           ;initializer for _tris_reg
    74   0016BC  92                 	db	146
    75   0016BD  0F                 	db	15
    76   0016BE  93                 	db	147
    77   0016BF  0F                 	db	15
    78   0016C0  94                 	db	148
    79   0016C1  0F                 	db	15
    80   0016C2  00                 	db	0
    81   0016C3  00                 	db	0
    82   0016C4  00                 	db	0
    83   0016C5  00                 	db	0
    84                           
    85                           ;initializer for _port_reg
    86   0016C6  80                 	db	128
    87   0016C7  0F                 	db	15
    88   0016C8  81                 	db	129
    89   0016C9  0F                 	db	15
    90   0016CA  82                 	db	130
    91   0016CB  0F                 	db	15
    92                           
    93                           ;initializer for _Motor
    94   0016CC  10                 	db	16
    95   0016CD  11                 	db	17
    96   0016CE  00                 	db	0
    97   0016CF  00                 	db	0
    98                           
    99                           ;initializer for _Motor_1
   100   0016D0  10                 	db	16
   101   0016D1  11                 	db	17
   102   0016D2  12                 	db	18
   103   0016D3  13                 	db	19
   104                           
   105                           ; #config settings
   106                           
   107                           	psect	cinit
   108   00167C                     __pcinit:
   109                           	callstack 0
   110   00167C                     start_initialization:
   111                           	callstack 0
   112   00167C                     __initialization:
   113                           	callstack 0
   114                           
   115                           ; Initialize objects allocated to COMRAM (34 bytes)
   116                           ; load TBLPTR registers with __pidataCOMRAM
   117   00167C  0EB2               	movlw	low __pidataCOMRAM
   118   00167E  6EF6               	movwf	tblptrl,c
   119   001680  0E16               	movlw	high __pidataCOMRAM
   120   001682  6EF7               	movwf	tblptrh,c
   121   001684  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   122   001686  6EF8               	movwf	tblptru,c
   123   001688  EE00  F001         	lfsr	0,__pdataCOMRAM
   124   00168C  EE10 F022          	lfsr	1,34
   125   001690                     copy_data0:
   126   001690  0009               	tblrd		*+
   127   001692  CFF5 FFEE          	movff	tablat,postinc0
   128   001696  50E5               	movf	postdec1,w,c
   129   001698  50E1               	movf	fsr1l,w,c
   130   00169A  E1FA               	bnz	copy_data0
   131                           
   132                           ; Clear objects allocated to COMRAM (6 bytes)
   133   00169C  6A38               	clrf	(__pbssCOMRAM+5)& (0+255),c
   134   00169E  6A37               	clrf	(__pbssCOMRAM+4)& (0+255),c
   135   0016A0  6A36               	clrf	(__pbssCOMRAM+3)& (0+255),c
   136   0016A2  6A35               	clrf	(__pbssCOMRAM+2)& (0+255),c
   137   0016A4  6A34               	clrf	(__pbssCOMRAM+1)& (0+255),c
   138   0016A6  6A33               	clrf	__pbssCOMRAM& (0+255),c
   139   0016A8                     end_of_initialization:
   140                           	callstack 0
   141   0016A8                     __end_of__initialization:
   142                           	callstack 0
   143   0016A8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   144   0016AA  6EF8               	movwf	tblptru,c
   145   0016AC  0100               	movlb	0
   146   0016AE  EF13  F00A         	goto	_main	;jump to C main() function
   147                           
   148                           	psect	bssCOMRAM
   149   000033                     __pbssCOMRAM:
   150                           	callstack 0
   151   000033                     button_read_state@F2933:
   152                           	callstack 0
   153   000033                     	ds	1
   154   000034                     button_intialize@F2927:
   155                           	callstack 0
   156   000034                     	ds	1
   157   000035                     __Motor_B:
   158                           	callstack 0
   159   000035                     	ds	2
   160   000037                     __Motor_A:
   161                           	callstack 0
   162   000037                     	ds	2
   163                           
   164                           	psect	dataCOMRAM
   165   000001                     __pdataCOMRAM:
   166                           	callstack 0
   167   000001                     _lat_reg:
   168                           	callstack 0
   169   000001                     	ds	10
   170   00000B                     _tris_reg:
   171                           	callstack 0
   172   00000B                     	ds	10
   173   000015                     _port_reg:
   174                           	callstack 0
   175   000015                     	ds	6
   176   00001B                     _Motor:
   177                           	callstack 0
   178   00001B                     	ds	4
   179   00001F                     _Motor_1:
   180                           	callstack 0
   181   00001F                     	ds	4
   182                           
   183                           	psect	cstackCOMRAM
   184   000023                     __pcstackCOMRAM:
   185                           	callstack 0
   186   000023                     gpio_pin_dirction_intialize@_pin_config:
   187                           	callstack 0
   188   000023                     gpio_pin_write_logic@_pin_config:
   189                           	callstack 0
   190                           
   191                           ; 1 bytes @ 0x0
   192   000023                     	ds	1
   193   000024                     ??_gpio_pin_dirction_intialize:
   194   000024                     gpio_pin_write_logic@logic:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x1
   198   000024                     	ds	1
   199   000025                     ??_gpio_pin_write_logic:
   200                           
   201                           ; 1 bytes @ 0x2
   202   000025                     	ds	4
   203   000029                     gpio_pin_dirction_intialize@ret:
   204                           	callstack 0
   205                           
   206                           ; 1 bytes @ 0x6
   207   000029                     	ds	1
   208   00002A                     gpio_pin_write_logic@ret:
   209                           	callstack 0
   210   00002A                     dc_motor_intialize@dc_motor_config:
   211                           	callstack 0
   212                           
   213                           ; 1 bytes @ 0x7
   214   00002A                     	ds	1
   215   00002B                     dc_motor_intialize@Motor_target:
   216                           	callstack 0
   217   00002B                     dc_motor_move_right@dc_motor_config:
   218                           	callstack 0
   219   00002B                     dc_motor_move_left@dc_motor_config:
   220                           	callstack 0
   221   00002B                     dc_motor_stop@dc_motor_config:
   222                           	callstack 0
   223                           
   224                           ; 1 bytes @ 0x8
   225   00002B                     	ds	1
   226   00002C                     ??_dc_motor_intialize:
   227   00002C                     dc_motor_move_right@Motor_target:
   228                           	callstack 0
   229   00002C                     dc_motor_move_left@Motor_target:
   230                           	callstack 0
   231   00002C                     dc_motor_stop@Motor_target:
   232                           	callstack 0
   233                           
   234                           ; 1 bytes @ 0x9
   235   00002C                     	ds	1
   236   00002D                     ??_dc_motor_move_right:
   237   00002D                     ??_dc_motor_stop:
   238   00002D                     ??_dc_motor_move_left:
   239                           
   240                           ; 1 bytes @ 0xA
   241   00002D                     	ds	1
   242   00002E                     dc_motor_intialize@ret:
   243                           	callstack 0
   244                           
   245                           ; 1 bytes @ 0xB
   246   00002E                     	ds	1
   247   00002F                     dc_motor_move_right@ret:
   248                           	callstack 0
   249   00002F                     dc_motor_move_left@ret:
   250                           	callstack 0
   251   00002F                     dc_motor_stop@ret:
   252                           	callstack 0
   253                           
   254                           ; 1 bytes @ 0xC
   255   00002F                     	ds	1
   256   000030                     ??_main:
   257                           
   258                           ; 1 bytes @ 0xD
   259   000030                     	ds	2
   260   000032                     main@ret:
   261                           	callstack 0
   262                           
   263                           ; 1 bytes @ 0xF
   264   000032                     	ds	1
   265                           
   266 ;;
   267 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   268 ;;
   269 ;; *************** function _main *****************
   270 ;; Defined at:
   271 ;;		line 35 in file "ECAL_layer/Application.c"
   272 ;; Parameters:    Size  Location     Type
   273 ;;		None
   274 ;; Auto vars:     Size  Location     Type
   275 ;;  ret             1   15[COMRAM] unsigned char 
   276 ;;  logic_t         1    0        volatile unsigned char 
   277 ;; Return value:  Size  Location     Type
   278 ;;                  2  136[None  ] int 
   279 ;; Registers used:
   280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   281 ;; Tracked objects:
   282 ;;		On entry : 0/0
   283 ;;		On exit  : 0/0
   284 ;;		Unchanged: 0/0
   285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   287 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   288 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   289 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   290 ;;Total ram usage:        3 bytes
   291 ;; Hardware stack levels required when called: 2
   292 ;; This function calls:
   293 ;;		_dc_motor_intialize
   294 ;;		_dc_motor_move_left
   295 ;;		_dc_motor_move_right
   296 ;;		_dc_motor_stop
   297 ;; This function is called by:
   298 ;;		Startup code after reset
   299 ;; This function uses a non-reentrant model
   300 ;;
   301                           
   302                           	psect	text0
   303   001426                     __ptext0:
   304                           	callstack 0
   305   001426                     _main:
   306                           	callstack 29
   307   001426                     
   308                           ;ECAL_layer/Application.c: 36:   uint8_t volatile logic_t;;ECAL_layer/Application.c: 37:
      +                               uint8_t ret;;ECAL_layer/Application.c: 38:     ret=dc_motor_intialize(&Motor_1,Moto
      +                          r_A);
   309   001426  0E1F               	movlw	low _Motor_1
   310   001428  6E2A               	movwf	dc_motor_intialize@dc_motor_config^0,c
   311   00142A  0E00               	movlw	0
   312   00142C  6E2B               	movwf	dc_motor_intialize@Motor_target^0,c
   313   00142E  EC01  F008         	call	_dc_motor_intialize	;wreg free
   314   001432  6E32               	movwf	main@ret^0,c
   315                           
   316                           ;ECAL_layer/Application.c: 40: ret=dc_motor_intialize(&Motor_1,Motor_B);
   317   001434  0E1F               	movlw	low _Motor_1
   318   001436  6E2A               	movwf	dc_motor_intialize@dc_motor_config^0,c
   319   001438  0E01               	movlw	1
   320   00143A  6E2B               	movwf	dc_motor_intialize@Motor_target^0,c
   321   00143C  EC01  F008         	call	_dc_motor_intialize	;wreg free
   322   001440  6E32               	movwf	main@ret^0,c
   323   001442                     l137:
   324                           
   325                           ;ECAL_layer/Application.c: 44: ret=dc_motor_move_right(&(Motor_1),Motor_A);
   326   001442  0E1F               	movlw	low _Motor_1
   327   001444  6E2B               	movwf	dc_motor_move_right@dc_motor_config^0,c
   328   001446  0E00               	movlw	0
   329   001448  6E2C               	movwf	dc_motor_move_right@Motor_target^0,c
   330   00144A  ECB8  F00A         	call	_dc_motor_move_right	;wreg free
   331   00144E  6E32               	movwf	main@ret^0,c
   332                           
   333                           ;ECAL_layer/Application.c: 45: ret=dc_motor_move_right(&(Motor_1),Motor_B);
   334   001450  0E1F               	movlw	low _Motor_1
   335   001452  6E2B               	movwf	dc_motor_move_right@dc_motor_config^0,c
   336   001454  0E01               	movlw	1
   337   001456  6E2C               	movwf	dc_motor_move_right@Motor_target^0,c
   338   001458  ECB8  F00A         	call	_dc_motor_move_right	;wreg free
   339   00145C  6E32               	movwf	main@ret^0,c
   340   00145E                     
   341                           ;ECAL_layer/Application.c: 46: _delay((unsigned long)((1000)*(16000000U/4000.0)));
   342   00145E  0E15               	movlw	21
   343   001460  6E31               	movwf	(??_main+1)^0,c
   344   001462  0E4B               	movlw	75
   345   001464  6E30               	movwf	??_main^0,c
   346   001466  0EBE               	movlw	190
   347   001468                     u737:
   348   001468  2EE8               	decfsz	wreg,f,c
   349   00146A  D7FE               	bra	u737
   350   00146C  2E30               	decfsz	??_main^0,f,c
   351   00146E  D7FC               	bra	u737
   352   001470  2E31               	decfsz	(??_main+1)^0,f,c
   353   001472  D7FA               	bra	u737
   354   001474  D000               	nop2	
   355   001476  0E1F               	movlw	low _Motor_1
   356   001478  6E2B               	movwf	dc_motor_stop@dc_motor_config^0,c
   357   00147A  0E00               	movlw	0
   358   00147C  6E2C               	movwf	dc_motor_stop@Motor_target^0,c
   359   00147E  EC75  F00A         	call	_dc_motor_stop	;wreg free
   360                           
   361                           ;ECAL_layer/Application.c: 48: _delay((unsigned long)((1000)*(16000000U/4000.0)));
   362   001482  0E15               	movlw	21
   363   001484  6E31               	movwf	(??_main+1)^0,c
   364   001486  0E4B               	movlw	75
   365   001488  6E30               	movwf	??_main^0,c
   366   00148A  0EBE               	movlw	190
   367   00148C                     u747:
   368   00148C  2EE8               	decfsz	wreg,f,c
   369   00148E  D7FE               	bra	u747
   370   001490  2E30               	decfsz	??_main^0,f,c
   371   001492  D7FC               	bra	u747
   372   001494  2E31               	decfsz	(??_main+1)^0,f,c
   373   001496  D7FA               	bra	u747
   374   001498  D000               	nop2	
   375   00149A  0E1F               	movlw	low _Motor_1
   376   00149C  6E2B               	movwf	dc_motor_move_left@dc_motor_config^0,c
   377   00149E  0E00               	movlw	0
   378   0014A0  6E2C               	movwf	dc_motor_move_left@Motor_target^0,c
   379   0014A2  ECFB  F00A         	call	_dc_motor_move_left	;wreg free
   380   0014A6                     
   381                           ;ECAL_layer/Application.c: 50: _delay((unsigned long)((1000)*(16000000U/4000.0)));
   382   0014A6  0E15               	movlw	21
   383   0014A8  6E31               	movwf	(??_main+1)^0,c
   384   0014AA  0E4B               	movlw	75
   385   0014AC  6E30               	movwf	??_main^0,c
   386   0014AE  0EBE               	movlw	190
   387   0014B0                     u757:
   388   0014B0  2EE8               	decfsz	wreg,f,c
   389   0014B2  D7FE               	bra	u757
   390   0014B4  2E30               	decfsz	??_main^0,f,c
   391   0014B6  D7FC               	bra	u757
   392   0014B8  2E31               	decfsz	(??_main+1)^0,f,c
   393   0014BA  D7FA               	bra	u757
   394   0014BC  D000               	nop2	
   395   0014BE  0E1F               	movlw	low _Motor_1
   396   0014C0  6E2B               	movwf	dc_motor_stop@dc_motor_config^0,c
   397   0014C2  0E00               	movlw	0
   398   0014C4  6E2C               	movwf	dc_motor_stop@Motor_target^0,c
   399   0014C6  EC75  F00A         	call	_dc_motor_stop	;wreg free
   400   0014CA                     
   401                           ;ECAL_layer/Application.c: 52: _delay((unsigned long)((1000)*(16000000U/4000.0)));
   402   0014CA  0E15               	movlw	21
   403   0014CC  6E31               	movwf	(??_main+1)^0,c
   404   0014CE  0E4B               	movlw	75
   405   0014D0  6E30               	movwf	??_main^0,c
   406   0014D2  0EBE               	movlw	190
   407   0014D4                     u767:
   408   0014D4  2EE8               	decfsz	wreg,f,c
   409   0014D6  D7FE               	bra	u767
   410   0014D8  2E30               	decfsz	??_main^0,f,c
   411   0014DA  D7FC               	bra	u767
   412   0014DC  2E31               	decfsz	(??_main+1)^0,f,c
   413   0014DE  D7FA               	bra	u767
   414   0014E0  D000               	nop2	
   415   0014E2  EF21  F00A         	goto	l137
   416   0014E6  EF00  F000         	goto	start
   417   0014EA                     __end_of_main:
   418                           	callstack 0
   419                           
   420 ;; *************** function _dc_motor_stop *****************
   421 ;; Defined at:
   422 ;;		line 138 in file "ECAL_layer/DC_MOTOR/ecu_dc_motor.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;  dc_motor_con    1    8[COMRAM] PTR struct .
   425 ;;		 -> Motor_1(4), 
   426 ;;  Motor_target    1    9[COMRAM] enum E2910
   427 ;; Auto vars:     Size  Location     Type
   428 ;;  ret             1   12[COMRAM] unsigned char 
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      unsigned char 
   431 ;; Registers used:
   432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   440 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   441 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   442 ;;Total ram usage:        5 bytes
   443 ;; Hardware stack levels used: 1
   444 ;; Hardware stack levels required when called: 1
   445 ;; This function calls:
   446 ;;		_gpio_pin_write_logic
   447 ;; This function is called by:
   448 ;;		_main
   449 ;; This function uses a non-reentrant model
   450 ;;
   451                           
   452                           	psect	text1
   453   0014EA                     __ptext1:
   454                           	callstack 0
   455   0014EA                     _dc_motor_stop:
   456                           	callstack 29
   457   0014EA                     
   458                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 140:   if((((void*)0)==dc_motor_config))
   459   0014EA  502B               	movf	dc_motor_stop@dc_motor_config^0,w,c
   460   0014EC  A4D8               	btfss	status,2,c
   461   0014EE  EF7B  F00A         	goto	u701
   462   0014F2  EF7D  F00A         	goto	u700
   463   0014F6                     u701:
   464   0014F6  EFA1  F00A         	goto	l1366
   465   0014FA                     u700:
   466   0014FA                     l1358:
   467                           
   468                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 141:   {;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 142:  
      +                               ret=(STD_RetunType)0x00;
   469   0014FA  0E00               	movlw	0
   470   0014FC  6E2F               	movwf	dc_motor_stop@ret^0,c
   471                           
   472                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 143:   }
   473   0014FE  EFB6  F00A         	goto	l1368
   474   001502                     l1360:
   475                           
   476                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 149:           {;ECAL_layer/DC_MOTOR/ecu_dc_motor.c
      +                          : 150:              ret= gpio_pin_write_logic(&_Motor_A[0],LOW);
   477   001502  0E37               	movlw	low __Motor_A
   478   001504  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   479   001506  0E00               	movlw	0
   480   001508  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   481   00150A  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   482   00150E  6E2F               	movwf	dc_motor_stop@ret^0,c
   483                           
   484                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 151:              ret= gpio_pin_write_logic(&_Motor
      +                          _A[1],LOW);
   485   001510  0E38               	movlw	low (__Motor_A+1)
   486   001512  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   487   001514  0E00               	movlw	0
   488   001516  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   489   001518  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   490   00151C  6E2F               	movwf	dc_motor_stop@ret^0,c
   491                           
   492                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 152:           };ECAL_layer/DC_MOTOR/ecu_dc_motor.c
      +                          : 153:               break;
   493   00151E  EFB6  F00A         	goto	l1368
   494   001522                     l1362:
   495                           
   496                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 155:           {;ECAL_layer/DC_MOTOR/ecu_dc_motor.c
      +                          : 156:               ret= gpio_pin_write_logic(&_Motor_B[0],LOW);
   497   001522  0E35               	movlw	low __Motor_B
   498   001524  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   499   001526  0E00               	movlw	0
   500   001528  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   501   00152A  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   502   00152E  6E2F               	movwf	dc_motor_stop@ret^0,c
   503                           
   504                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 157:              ret= gpio_pin_write_logic(&_Motor
      +                          _B[1],LOW);}
   505   001530  0E36               	movlw	low (__Motor_B+1)
   506   001532  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   507   001534  0E00               	movlw	0
   508   001536  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   509   001538  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   510   00153C  6E2F               	movwf	dc_motor_stop@ret^0,c
   511                           
   512                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 158:               break;
   513   00153E  EFB6  F00A         	goto	l1368
   514   001542                     l1366:
   515   001542  502C               	movf	dc_motor_stop@Motor_target^0,w,c
   516   001544  6E2D               	movwf	??_dc_motor_stop^0,c
   517   001546  6A2E               	clrf	(??_dc_motor_stop+1)^0,c
   518                           
   519                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   520                           ; Switch size 1, requested type "simple"
   521                           ; Number of cases is 1, Range of values is 0 to 0
   522                           ; switch strategies available:
   523                           ; Name         Instructions Cycles
   524                           ; simple_byte            4     3 (average)
   525                           ;	Chosen strategy is simple_byte
   526   001548  502E               	movf	(??_dc_motor_stop+1)^0,w,c
   527   00154A  0A00               	xorlw	0	; case 0
   528   00154C  B4D8               	btfsc	status,2,c
   529   00154E  EFAB  F00A         	goto	l1452
   530   001552  EF7D  F00A         	goto	l1358
   531   001556                     l1452:
   532                           
   533                           ; Switch size 1, requested type "simple"
   534                           ; Number of cases is 2, Range of values is 0 to 1
   535                           ; switch strategies available:
   536                           ; Name         Instructions Cycles
   537                           ; simple_byte            7     4 (average)
   538                           ;	Chosen strategy is simple_byte
   539   001556  502D               	movf	??_dc_motor_stop^0,w,c
   540   001558  0A00               	xorlw	0	; case 0
   541   00155A  B4D8               	btfsc	status,2,c
   542   00155C  EF81  F00A         	goto	l1360
   543   001560  0A01               	xorlw	1	; case 1
   544   001562  B4D8               	btfsc	status,2,c
   545   001564  EF91  F00A         	goto	l1362
   546   001568  EF7D  F00A         	goto	l1358
   547   00156C                     l1368:
   548                           
   549                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 163:     return ret;
   550   00156C  502F               	movf	dc_motor_stop@ret^0,w,c
   551   00156E  0012               	return		;funcret
   552   001570                     __end_of_dc_motor_stop:
   553                           	callstack 0
   554                           
   555 ;; *************** function _dc_motor_move_right *****************
   556 ;; Defined at:
   557 ;;		line 74 in file "ECAL_layer/DC_MOTOR/ecu_dc_motor.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;  dc_motor_con    1    8[COMRAM] PTR struct .
   560 ;;		 -> Motor_1(4), 
   561 ;;  Motor_target    1    9[COMRAM] enum E2910
   562 ;; Auto vars:     Size  Location     Type
   563 ;;  ret             1   12[COMRAM] unsigned char 
   564 ;; Return value:  Size  Location     Type
   565 ;;                  1    wreg      unsigned char 
   566 ;; Registers used:
   567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   568 ;; Tracked objects:
   569 ;;		On entry : 0/0
   570 ;;		On exit  : 0/0
   571 ;;		Unchanged: 0/0
   572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   575 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   576 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   577 ;;Total ram usage:        5 bytes
   578 ;; Hardware stack levels used: 1
   579 ;; Hardware stack levels required when called: 1
   580 ;; This function calls:
   581 ;;		_gpio_pin_write_logic
   582 ;; This function is called by:
   583 ;;		_main
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text2
   588   001570                     __ptext2:
   589                           	callstack 0
   590   001570                     _dc_motor_move_right:
   591                           	callstack 29
   592   001570                     
   593                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 76:   if((((void*)0)==dc_motor_config))
   594   001570  502B               	movf	dc_motor_move_right@dc_motor_config^0,w,c
   595   001572  A4D8               	btfss	status,2,c
   596   001574  EFBE  F00A         	goto	u691
   597   001578  EFC0  F00A         	goto	u690
   598   00157C                     u691:
   599   00157C  EFE4  F00A         	goto	l1346
   600   001580                     u690:
   601   001580                     l1338:
   602                           
   603                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 77:   {;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 78:    
      +                             ret=(STD_RetunType)0x00;
   604   001580  0E00               	movlw	0
   605   001582  6E2F               	movwf	dc_motor_move_right@ret^0,c
   606                           
   607                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 79:   }
   608   001584  EFF9  F00A         	goto	l1348
   609   001588                     l1340:
   610                           
   611                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 85:              ret= gpio_pin_write_logic(&_Motor_
      +                          A[0],HIGH);
   612   001588  0E37               	movlw	low __Motor_A
   613   00158A  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   614   00158C  0E01               	movlw	1
   615   00158E  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   616   001590  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   617   001594  6E2F               	movwf	dc_motor_move_right@ret^0,c
   618                           
   619                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 86:              ret= gpio_pin_write_logic(&_Motor_
      +                          A[1],LOW);
   620   001596  0E38               	movlw	low (__Motor_A+1)
   621   001598  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   622   00159A  0E00               	movlw	0
   623   00159C  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   624   00159E  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   625   0015A2  6E2F               	movwf	dc_motor_move_right@ret^0,c
   626                           
   627                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 87:               break;
   628   0015A4  EFF9  F00A         	goto	l1348
   629   0015A8                     l1342:
   630                           
   631                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 89:               ret= gpio_pin_write_logic(&_Motor
      +                          _B[0],HIGH);
   632   0015A8  0E35               	movlw	low __Motor_B
   633   0015AA  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   634   0015AC  0E01               	movlw	1
   635   0015AE  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   636   0015B0  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   637   0015B4  6E2F               	movwf	dc_motor_move_right@ret^0,c
   638                           
   639                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 90:              ret= gpio_pin_write_logic(&_Motor_
      +                          B[1],LOW);
   640   0015B6  0E36               	movlw	low (__Motor_B+1)
   641   0015B8  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   642   0015BA  0E00               	movlw	0
   643   0015BC  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   644   0015BE  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   645   0015C2  6E2F               	movwf	dc_motor_move_right@ret^0,c
   646                           
   647                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 91:               break;
   648   0015C4  EFF9  F00A         	goto	l1348
   649   0015C8                     l1346:
   650   0015C8  502C               	movf	dc_motor_move_right@Motor_target^0,w,c
   651   0015CA  6E2D               	movwf	??_dc_motor_move_right^0,c
   652   0015CC  6A2E               	clrf	(??_dc_motor_move_right+1)^0,c
   653                           
   654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   655                           ; Switch size 1, requested type "simple"
   656                           ; Number of cases is 1, Range of values is 0 to 0
   657                           ; switch strategies available:
   658                           ; Name         Instructions Cycles
   659                           ; simple_byte            4     3 (average)
   660                           ;	Chosen strategy is simple_byte
   661   0015CE  502E               	movf	(??_dc_motor_move_right+1)^0,w,c
   662   0015D0  0A00               	xorlw	0	; case 0
   663   0015D2  B4D8               	btfsc	status,2,c
   664   0015D4  EFEE  F00A         	goto	l1454
   665   0015D8  EFC0  F00A         	goto	l1338
   666   0015DC                     l1454:
   667                           
   668                           ; Switch size 1, requested type "simple"
   669                           ; Number of cases is 2, Range of values is 0 to 1
   670                           ; switch strategies available:
   671                           ; Name         Instructions Cycles
   672                           ; simple_byte            7     4 (average)
   673                           ;	Chosen strategy is simple_byte
   674   0015DC  502D               	movf	??_dc_motor_move_right^0,w,c
   675   0015DE  0A00               	xorlw	0	; case 0
   676   0015E0  B4D8               	btfsc	status,2,c
   677   0015E2  EFC4  F00A         	goto	l1340
   678   0015E6  0A01               	xorlw	1	; case 1
   679   0015E8  B4D8               	btfsc	status,2,c
   680   0015EA  EFD4  F00A         	goto	l1342
   681   0015EE  EFC0  F00A         	goto	l1338
   682   0015F2                     l1348:
   683                           
   684                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 96:     return ret;
   685   0015F2  502F               	movf	dc_motor_move_right@ret^0,w,c
   686   0015F4  0012               	return		;funcret
   687   0015F6                     __end_of_dc_motor_move_right:
   688                           	callstack 0
   689                           
   690 ;; *************** function _dc_motor_move_left *****************
   691 ;; Defined at:
   692 ;;		line 106 in file "ECAL_layer/DC_MOTOR/ecu_dc_motor.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;  dc_motor_con    1    8[COMRAM] PTR struct .
   695 ;;		 -> Motor_1(4), 
   696 ;;  Motor_target    1    9[COMRAM] enum E2910
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  ret             1   12[COMRAM] unsigned char 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      unsigned char 
   701 ;; Registers used:
   702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   708 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   709 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   710 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   711 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   712 ;;Total ram usage:        5 bytes
   713 ;; Hardware stack levels used: 1
   714 ;; Hardware stack levels required when called: 1
   715 ;; This function calls:
   716 ;;		_gpio_pin_write_logic
   717 ;; This function is called by:
   718 ;;		_main
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text3
   723   0015F6                     __ptext3:
   724                           	callstack 0
   725   0015F6                     _dc_motor_move_left:
   726                           	callstack 29
   727   0015F6                     
   728                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 108:   if((((void*)0)==dc_motor_config))
   729   0015F6  502B               	movf	dc_motor_move_left@dc_motor_config^0,w,c
   730   0015F8  A4D8               	btfss	status,2,c
   731   0015FA  EF01  F00B         	goto	u711
   732   0015FE  EF03  F00B         	goto	u710
   733   001602                     u711:
   734   001602  EF27  F00B         	goto	l1386
   735   001606                     u710:
   736   001606                     l1378:
   737                           
   738                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 109:   {;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 110:  
      +                               ret=(STD_RetunType)0x00;
   739   001606  0E00               	movlw	0
   740   001608  6E2F               	movwf	dc_motor_move_left@ret^0,c
   741                           
   742                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 111:   }
   743   00160A  EF3C  F00B         	goto	l1388
   744   00160E                     l1380:
   745                           
   746                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 117:              ret= gpio_pin_write_logic(&_Motor
      +                          _A[0],LOW);
   747   00160E  0E37               	movlw	low __Motor_A
   748   001610  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   749   001612  0E00               	movlw	0
   750   001614  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   751   001616  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   752   00161A  6E2F               	movwf	dc_motor_move_left@ret^0,c
   753                           
   754                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 118:              ret= gpio_pin_write_logic(&_Motor
      +                          _A[1],HIGH);
   755   00161C  0E38               	movlw	low (__Motor_A+1)
   756   00161E  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   757   001620  0E01               	movlw	1
   758   001622  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   759   001624  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   760   001628  6E2F               	movwf	dc_motor_move_left@ret^0,c
   761                           
   762                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 119:               break;
   763   00162A  EF3C  F00B         	goto	l1388
   764   00162E                     l1382:
   765                           
   766                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 121:               ret= gpio_pin_write_logic(&_Moto
      +                          r_B[0],LOW);
   767   00162E  0E35               	movlw	low __Motor_B
   768   001630  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   769   001632  0E00               	movlw	0
   770   001634  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   771   001636  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   772   00163A  6E2F               	movwf	dc_motor_move_left@ret^0,c
   773                           
   774                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 122:              ret= gpio_pin_write_logic(&_Motor
      +                          _B[1],HIGH);
   775   00163C  0E36               	movlw	low (__Motor_B+1)
   776   00163E  6E23               	movwf	gpio_pin_write_logic@_pin_config^0,c
   777   001640  0E01               	movlw	1
   778   001642  6E24               	movwf	gpio_pin_write_logic@logic^0,c
   779   001644  EC7D  F009         	call	_gpio_pin_write_logic	;wreg free
   780   001648  6E2F               	movwf	dc_motor_move_left@ret^0,c
   781                           
   782                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 123:               break;
   783   00164A  EF3C  F00B         	goto	l1388
   784   00164E                     l1386:
   785   00164E  502C               	movf	dc_motor_move_left@Motor_target^0,w,c
   786   001650  6E2D               	movwf	??_dc_motor_move_left^0,c
   787   001652  6A2E               	clrf	(??_dc_motor_move_left+1)^0,c
   788                           
   789                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   790                           ; Switch size 1, requested type "simple"
   791                           ; Number of cases is 1, Range of values is 0 to 0
   792                           ; switch strategies available:
   793                           ; Name         Instructions Cycles
   794                           ; simple_byte            4     3 (average)
   795                           ;	Chosen strategy is simple_byte
   796   001654  502E               	movf	(??_dc_motor_move_left+1)^0,w,c
   797   001656  0A00               	xorlw	0	; case 0
   798   001658  B4D8               	btfsc	status,2,c
   799   00165A  EF31  F00B         	goto	l1456
   800   00165E  EF03  F00B         	goto	l1378
   801   001662                     l1456:
   802                           
   803                           ; Switch size 1, requested type "simple"
   804                           ; Number of cases is 2, Range of values is 0 to 1
   805                           ; switch strategies available:
   806                           ; Name         Instructions Cycles
   807                           ; simple_byte            7     4 (average)
   808                           ;	Chosen strategy is simple_byte
   809   001662  502D               	movf	??_dc_motor_move_left^0,w,c
   810   001664  0A00               	xorlw	0	; case 0
   811   001666  B4D8               	btfsc	status,2,c
   812   001668  EF07  F00B         	goto	l1380
   813   00166C  0A01               	xorlw	1	; case 1
   814   00166E  B4D8               	btfsc	status,2,c
   815   001670  EF17  F00B         	goto	l1382
   816   001674  EF03  F00B         	goto	l1378
   817   001678                     l1388:
   818                           
   819                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 128:     return ret;
   820   001678  502F               	movf	dc_motor_move_left@ret^0,w,c
   821   00167A  0012               	return		;funcret
   822   00167C                     __end_of_dc_motor_move_left:
   823                           	callstack 0
   824                           
   825 ;; *************** function _gpio_pin_write_logic *****************
   826 ;; Defined at:
   827 ;;		line 72 in file "ECAL_layer/PIC18f_MCAL_gpio.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;  _pin_config     1    0[COMRAM] PTR const struct .
   830 ;;		 -> _Motor_B(2), _Motor_A(2), 
   831 ;;  logic           1    1[COMRAM] enum E2809
   832 ;; Auto vars:     Size  Location     Type
   833 ;;  ret             1    7[COMRAM] unsigned char 
   834 ;; Return value:  Size  Location     Type
   835 ;;                  1    wreg      unsigned char 
   836 ;; Registers used:
   837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   843 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   844 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   845 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   847 ;;Total ram usage:        8 bytes
   848 ;; Hardware stack levels used: 1
   849 ;; This function calls:
   850 ;;		Nothing
   851 ;; This function is called by:
   852 ;;		_dc_motor_move_right
   853 ;;		_dc_motor_move_left
   854 ;;		_dc_motor_stop
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text4
   859   0012FA                     __ptext4:
   860                           	callstack 0
   861   0012FA                     _gpio_pin_write_logic:
   862                           	callstack 29
   863   0012FA                     
   864                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 73:         uint8_t ret=(STD_RetunType)0x01 ;
   865   0012FA  0E01               	movlw	1
   866   0012FC  6E2A               	movwf	gpio_pin_write_logic@ret^0,c
   867                           
   868                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 74:     if((_pin_config==((void*)0))||(_pin_config->pin>
      +                          7)||(_pin_config->port>5))
   869   0012FE  5023               	movf	gpio_pin_write_logic@_pin_config^0,w,c
   870   001300  B4D8               	btfsc	status,2,c
   871   001302  EF85  F009         	goto	u591
   872   001306  EF87  F009         	goto	u590
   873   00130A                     u591:
   874   00130A  EFA5  F009         	goto	l1274
   875   00130E                     u590:
   876   00130E  5023               	movf	gpio_pin_write_logic@_pin_config^0,w,c
   877   001310  6ED9               	movwf	fsr2l,c
   878   001312  6ADA               	clrf	fsr2h,c
   879   001314  30DF               	rrcf	223,w,c
   880   001316  32E8               	rrcf	wreg,f,c
   881   001318  32E8               	rrcf	wreg,f,c
   882   00131A  0B07               	andlw	7
   883   00131C  6E25               	movwf	??_gpio_pin_write_logic^0,c
   884   00131E  0E08               	movlw	8
   885   001320  6025               	cpfslt	??_gpio_pin_write_logic^0,c
   886   001322  EF95  F009         	goto	u601
   887   001326  EF97  F009         	goto	u600
   888   00132A                     u601:
   889   00132A  EFA5  F009         	goto	l1274
   890   00132E                     u600:
   891   00132E  5023               	movf	gpio_pin_write_logic@_pin_config^0,w,c
   892   001330  6ED9               	movwf	fsr2l,c
   893   001332  6ADA               	clrf	fsr2h,c
   894   001334  50DF               	movf	223,w,c
   895   001336  0B07               	andlw	7
   896   001338  6E25               	movwf	??_gpio_pin_write_logic^0,c
   897   00133A  0E05               	movlw	5
   898   00133C  6425               	cpfsgt	??_gpio_pin_write_logic^0,c
   899   00133E  EFA3  F009         	goto	u611
   900   001342  EFA5  F009         	goto	u610
   901   001346                     u611:
   902   001346  EFFC  F009         	goto	l1282
   903   00134A                     u610:
   904   00134A                     l1274:
   905                           
   906                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 75:     {;ECAL_layer/PIC18f_MCAL_gpio.c: 76:         ret
      +                          =(STD_RetunType)0x00 ;
   907   00134A  0E00               	movlw	0
   908   00134C  6E2A               	movwf	gpio_pin_write_logic@ret^0,c
   909                           
   910                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 78:     }
   911   00134E  EF11  F00A         	goto	l1284
   912   001352                     l1276:
   913                           
   914                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 84:          (*lat_reg[_pin_config->port]&=~((uint8_t)1 
      +                          <<_pin_config->pin));
   915   001352  5023               	movf	gpio_pin_write_logic@_pin_config^0,w,c
   916   001354  6ED9               	movwf	fsr2l,c
   917   001356  6ADA               	clrf	fsr2h,c
   918   001358  30DF               	rrcf	223,w,c
   919   00135A  32E8               	rrcf	wreg,f,c
   920   00135C  32E8               	rrcf	wreg,f,c
   921   00135E  0B07               	andlw	7
   922   001360  6E25               	movwf	??_gpio_pin_write_logic^0,c
   923   001362  0E01               	movlw	1
   924   001364  6E26               	movwf	(??_gpio_pin_write_logic+1)^0,c
   925   001366  2A25               	incf	??_gpio_pin_write_logic^0,f,c
   926   001368  EFB8  F009         	goto	u624
   927   00136C                     u625:
   928   00136C  90D8               	bcf	status,0,c
   929   00136E  3626               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
   930   001370                     u624:
   931   001370  2E25               	decfsz	??_gpio_pin_write_logic^0,f,c
   932   001372  EFB6  F009         	goto	u625
   933   001376  5026               	movf	(??_gpio_pin_write_logic+1)^0,w,c
   934   001378  0AFF               	xorlw	255
   935   00137A  6E27               	movwf	(??_gpio_pin_write_logic+2)^0,c
   936   00137C  5023               	movf	gpio_pin_write_logic@_pin_config^0,w,c
   937   00137E  6ED9               	movwf	fsr2l,c
   938   001380  6ADA               	clrf	fsr2h,c
   939   001382  50DF               	movf	223,w,c
   940   001384  0B07               	andlw	7
   941   001386  0D02               	mullw	2
   942   001388  50F3               	movf	243,w,c
   943   00138A  0F01               	addlw	low _lat_reg
   944   00138C  6ED9               	movwf	fsr2l,c
   945   00138E  6ADA               	clrf	fsr2h,c
   946   001390  CFDE F028          	movff	postinc2,??_gpio_pin_write_logic+3
   947   001394  CFDD F029          	movff	postdec2,??_gpio_pin_write_logic+4
   948   001398  C028  FFD9         	movff	??_gpio_pin_write_logic+3,fsr2l
   949   00139C  C029  FFDA         	movff	??_gpio_pin_write_logic+4,fsr2h
   950   0013A0  5027               	movf	(??_gpio_pin_write_logic+2)^0,w,c
   951   0013A2  16DF               	andwf	indf2,f,c
   952                           
   953                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 85:                 break;
   954   0013A4  EF11  F00A         	goto	l1284
   955   0013A8                     l1278:
   956                           
   957                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 87:               (*lat_reg[_pin_config->port]|=((uint8_
      +                          t)1 <<_pin_config->pin));
   958   0013A8  5023               	movf	gpio_pin_write_logic@_pin_config^0,w,c
   959   0013AA  6ED9               	movwf	fsr2l,c
   960   0013AC  6ADA               	clrf	fsr2h,c
   961   0013AE  30DF               	rrcf	223,w,c
   962   0013B0  32E8               	rrcf	wreg,f,c
   963   0013B2  32E8               	rrcf	wreg,f,c
   964   0013B4  0B07               	andlw	7
   965   0013B6  6E25               	movwf	??_gpio_pin_write_logic^0,c
   966   0013B8  0E01               	movlw	1
   967   0013BA  6E26               	movwf	(??_gpio_pin_write_logic+1)^0,c
   968   0013BC  2A25               	incf	??_gpio_pin_write_logic^0,f,c
   969   0013BE  EFE3  F009         	goto	u634
   970   0013C2                     u635:
   971   0013C2  90D8               	bcf	status,0,c
   972   0013C4  3626               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
   973   0013C6                     u634:
   974   0013C6  2E25               	decfsz	??_gpio_pin_write_logic^0,f,c
   975   0013C8  EFE1  F009         	goto	u635
   976   0013CC  5023               	movf	gpio_pin_write_logic@_pin_config^0,w,c
   977   0013CE  6ED9               	movwf	fsr2l,c
   978   0013D0  6ADA               	clrf	fsr2h,c
   979   0013D2  50DF               	movf	223,w,c
   980   0013D4  0B07               	andlw	7
   981   0013D6  0D02               	mullw	2
   982   0013D8  50F3               	movf	243,w,c
   983   0013DA  0F01               	addlw	low _lat_reg
   984   0013DC  6ED9               	movwf	fsr2l,c
   985   0013DE  6ADA               	clrf	fsr2h,c
   986   0013E0  CFDE F027          	movff	postinc2,??_gpio_pin_write_logic+2
   987   0013E4  CFDD F028          	movff	postdec2,??_gpio_pin_write_logic+3
   988   0013E8  C027  FFD9         	movff	??_gpio_pin_write_logic+2,fsr2l
   989   0013EC  C028  FFDA         	movff	??_gpio_pin_write_logic+3,fsr2h
   990   0013F0  5026               	movf	(??_gpio_pin_write_logic+1)^0,w,c
   991   0013F2  12DF               	iorwf	indf2,f,c
   992   0013F4  EFA5  F009         	goto	l1274
   993   0013F8                     l1282:
   994   0013F8  5024               	movf	gpio_pin_write_logic@logic^0,w,c
   995   0013FA  6E25               	movwf	??_gpio_pin_write_logic^0,c
   996   0013FC  6A26               	clrf	(??_gpio_pin_write_logic+1)^0,c
   997                           
   998                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   999                           ; Switch size 1, requested type "simple"
  1000                           ; Number of cases is 1, Range of values is 0 to 0
  1001                           ; switch strategies available:
  1002                           ; Name         Instructions Cycles
  1003                           ; simple_byte            4     3 (average)
  1004                           ;	Chosen strategy is simple_byte
  1005   0013FE  5026               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  1006   001400  0A00               	xorlw	0	; case 0
  1007   001402  B4D8               	btfsc	status,2,c
  1008   001404  EF06  F00A         	goto	l1458
  1009   001408  EFA5  F009         	goto	l1274
  1010   00140C                     l1458:
  1011                           
  1012                           ; Switch size 1, requested type "simple"
  1013                           ; Number of cases is 2, Range of values is 0 to 1
  1014                           ; switch strategies available:
  1015                           ; Name         Instructions Cycles
  1016                           ; simple_byte            7     4 (average)
  1017                           ;	Chosen strategy is simple_byte
  1018   00140C  5025               	movf	??_gpio_pin_write_logic^0,w,c
  1019   00140E  0A00               	xorlw	0	; case 0
  1020   001410  B4D8               	btfsc	status,2,c
  1021   001412  EFA9  F009         	goto	l1276
  1022   001416  0A01               	xorlw	1	; case 1
  1023   001418  B4D8               	btfsc	status,2,c
  1024   00141A  EFD4  F009         	goto	l1278
  1025   00141E  EFA5  F009         	goto	l1274
  1026   001422                     l1284:
  1027                           
  1028                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 93:     return ret;
  1029   001422  502A               	movf	gpio_pin_write_logic@ret^0,w,c
  1030   001424  0012               	return		;funcret
  1031   001426                     __end_of_gpio_pin_write_logic:
  1032                           	callstack 0
  1033                           
  1034 ;; *************** function _dc_motor_intialize *****************
  1035 ;; Defined at:
  1036 ;;		line 14 in file "ECAL_layer/DC_MOTOR/ecu_dc_motor.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;  dc_motor_con    1    7[COMRAM] PTR struct .
  1039 ;;		 -> Motor_1(4), 
  1040 ;;  Motor_target    1    8[COMRAM] enum E2910
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;  ret             1   11[COMRAM] unsigned char 
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      unsigned char 
  1045 ;; Registers used:
  1046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1052 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1053 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1054 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1055 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1056 ;;Total ram usage:        5 bytes
  1057 ;; Hardware stack levels used: 1
  1058 ;; Hardware stack levels required when called: 1
  1059 ;; This function calls:
  1060 ;;		_gpio_pin_dirction_intialize
  1061 ;; This function is called by:
  1062 ;;		_main
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           	psect	text5
  1067   001002                     __ptext5:
  1068                           	callstack 0
  1069   001002                     _dc_motor_intialize:
  1070                           	callstack 29
  1071   001002                     
  1072                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 17:    if(((void*)0)==dc_motor_config)
  1073   001002  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1074   001004  A4D8               	btfss	status,2,c
  1075   001006  EF07  F008         	goto	u641
  1076   00100A  EF09  F008         	goto	u640
  1077   00100E                     u641:
  1078   00100E  EFC5  F008         	goto	l1326
  1079   001012                     u640:
  1080   001012                     l1294:
  1081                           
  1082                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 18:   {;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 19:    
      +                             ret=(STD_RetunType)0x00;
  1083   001012  0E00               	movlw	0
  1084   001014  6E2E               	movwf	dc_motor_intialize@ret^0,c
  1085                           
  1086                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 20:   }
  1087   001016  EFDA  F008         	goto	l1328
  1088   00101A                     l1296:
  1089                           
  1090                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 27:               _Motor_A[0].pin=dc_motor_config->
      +                          Motor_A_PIN[0].M_pin;
  1091   00101A  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1092   00101C  6ED9               	movwf	fsr2l,c
  1093   00101E  6ADA               	clrf	fsr2h,c
  1094   001020  50DF               	movf	223,w,c
  1095   001022  0B07               	andlw	7
  1096   001024  6E2C               	movwf	??_dc_motor_intialize^0,c
  1097   001026  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1098   001028  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1099   00102A  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1100   00102C  5037               	movf	__Motor_A^0,w,c
  1101   00102E  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1102   001030  0BC7               	andlw	-57
  1103   001032  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1104   001034  6E37               	movwf	__Motor_A^0,c
  1105                           
  1106                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 28:                _Motor_A[0].port=dc_motor_config
      +                          ->Motor_A_PIN[0].M_port;
  1107   001036  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1108   001038  6ED9               	movwf	fsr2l,c
  1109   00103A  6ADA               	clrf	fsr2h,c
  1110   00103C  30DF               	rrcf	223,w,c
  1111   00103E  32E8               	rrcf	wreg,f,c
  1112   001040  32E8               	rrcf	wreg,f,c
  1113   001042  0B07               	andlw	7
  1114   001044  6E2C               	movwf	??_dc_motor_intialize^0,c
  1115   001046  5037               	movf	__Motor_A^0,w,c
  1116   001048  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1117   00104A  0BF8               	andlw	-8
  1118   00104C  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1119   00104E  6E37               	movwf	__Motor_A^0,c
  1120   001050                     
  1121                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 29:                _Motor_A[0].logic=dc_motor_confi
      +                          g->Motor_A_PIN[0].pin_state;
  1122   001050  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1123   001052  6ED9               	movwf	fsr2l,c
  1124   001054  6ADA               	clrf	fsr2h,c
  1125   001056  ACDF               	btfss	indf2,6,c
  1126   001058  D002               	bra	u655
  1127   00105A  8E37               	bsf	__Motor_A^0,7,c
  1128   00105C  D001               	bra	u657
  1129   00105E                     u655:
  1130   00105E  9E37               	bcf	__Motor_A^0,7,c
  1131   001060                     u657:
  1132   001060                     
  1133                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 30:               _Motor_A[0].dirction=OUTPUT;
  1134   001060  9C37               	bcf	__Motor_A^0,6,c
  1135   001062                     
  1136                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 32:                 _Motor_A[1].pin=dc_motor_config
      +                          ->Motor_A_PIN[1].M_pin;
  1137   001062  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1138   001064  6ED9               	movwf	fsr2l,c
  1139   001066  6ADA               	clrf	fsr2h,c
  1140   001068  0E01               	movlw	1
  1141   00106A  26D9               	addwf	fsr2l,f,c
  1142   00106C  50DF               	movf	223,w,c
  1143   00106E  0B07               	andlw	7
  1144   001070  6E2C               	movwf	??_dc_motor_intialize^0,c
  1145   001072  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1146   001074  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1147   001076  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1148   001078  5038               	movf	(__Motor_A+1)^0,w,c
  1149   00107A  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1150   00107C  0BC7               	andlw	-57
  1151   00107E  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1152   001080  6E38               	movwf	(__Motor_A+1)^0,c
  1153   001082                     
  1154                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 33:                _Motor_A[1].port=dc_motor_config
      +                          ->Motor_A_PIN[1].M_port;
  1155   001082  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1156   001084  6ED9               	movwf	fsr2l,c
  1157   001086  6ADA               	clrf	fsr2h,c
  1158   001088  0E01               	movlw	1
  1159   00108A  26D9               	addwf	fsr2l,f,c
  1160   00108C  30DF               	rrcf	223,w,c
  1161   00108E  32E8               	rrcf	wreg,f,c
  1162   001090  32E8               	rrcf	wreg,f,c
  1163   001092  0B07               	andlw	7
  1164   001094  6E2C               	movwf	??_dc_motor_intialize^0,c
  1165   001096  5038               	movf	(__Motor_A+1)^0,w,c
  1166   001098  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1167   00109A  0BF8               	andlw	-8
  1168   00109C  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1169   00109E  6E38               	movwf	(__Motor_A+1)^0,c
  1170   0010A0                     
  1171                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 34:                _Motor_A[1].logic=dc_motor_confi
      +                          g->Motor_A_PIN[1].pin_state;
  1172   0010A0  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1173   0010A2  6ED9               	movwf	fsr2l,c
  1174   0010A4  6ADA               	clrf	fsr2h,c
  1175   0010A6  0E01               	movlw	1
  1176   0010A8  26D9               	addwf	fsr2l,f,c
  1177   0010AA  ACDF               	btfss	indf2,6,c
  1178   0010AC  D002               	bra	u665
  1179   0010AE  8E38               	bsf	(__Motor_A+1)^0,7,c
  1180   0010B0  D001               	bra	u667
  1181   0010B2                     u665:
  1182   0010B2  9E38               	bcf	(__Motor_A+1)^0,7,c
  1183   0010B4                     u667:
  1184   0010B4                     
  1185                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 35:               _Motor_A[1].dirction=OUTPUT;
  1186   0010B4  9C38               	bcf	(__Motor_A+1)^0,6,c
  1187   0010B6  0E37               	movlw	low __Motor_A
  1188   0010B8  6E23               	movwf	gpio_pin_dirction_intialize@_pin_config^0,c
  1189   0010BA  ECDC  F008         	call	_gpio_pin_dirction_intialize	;wreg free
  1190   0010BE                     
  1191                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 38:              ret=gpio_pin_dirction_intialize(&_
      +                          Motor_A[1]);
  1192   0010BE  0E38               	movlw	low (__Motor_A+1)
  1193   0010C0  6E23               	movwf	gpio_pin_dirction_intialize@_pin_config^0,c
  1194   0010C2  ECDC  F008         	call	_gpio_pin_dirction_intialize	;wreg free
  1195   0010C6  6E2E               	movwf	dc_motor_intialize@ret^0,c
  1196                           
  1197                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 39:               break;
  1198   0010C8  EFDA  F008         	goto	l1328
  1199   0010CC                     l1314:
  1200                           
  1201                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 41:           {;ECAL_layer/DC_MOTOR/ecu_dc_motor.c:
      +                           42:                _Motor_B[0].pin=dc_motor_config->Motor_B_PIN[0].M_pin;
  1202   0010CC  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1203   0010CE  6ED9               	movwf	fsr2l,c
  1204   0010D0  6ADA               	clrf	fsr2h,c
  1205   0010D2  0E02               	movlw	2
  1206   0010D4  26D9               	addwf	fsr2l,f,c
  1207   0010D6  50DF               	movf	223,w,c
  1208   0010D8  0B07               	andlw	7
  1209   0010DA  6E2C               	movwf	??_dc_motor_intialize^0,c
  1210   0010DC  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1211   0010DE  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1212   0010E0  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1213   0010E2  5035               	movf	__Motor_B^0,w,c
  1214   0010E4  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1215   0010E6  0BC7               	andlw	-57
  1216   0010E8  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1217   0010EA  6E35               	movwf	__Motor_B^0,c
  1218                           
  1219                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 43:                _Motor_B[0].port=dc_motor_config
      +                          ->Motor_B_PIN[0].M_port;
  1220   0010EC  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1221   0010EE  6ED9               	movwf	fsr2l,c
  1222   0010F0  6ADA               	clrf	fsr2h,c
  1223   0010F2  0E02               	movlw	2
  1224   0010F4  26D9               	addwf	fsr2l,f,c
  1225   0010F6  30DF               	rrcf	223,w,c
  1226   0010F8  32E8               	rrcf	wreg,f,c
  1227   0010FA  32E8               	rrcf	wreg,f,c
  1228   0010FC  0B07               	andlw	7
  1229   0010FE  6E2C               	movwf	??_dc_motor_intialize^0,c
  1230   001100  5035               	movf	__Motor_B^0,w,c
  1231   001102  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1232   001104  0BF8               	andlw	-8
  1233   001106  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1234   001108  6E35               	movwf	__Motor_B^0,c
  1235                           
  1236                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 44:                _Motor_B[0].logic=dc_motor_confi
      +                          g->Motor_B_PIN[0].pin_state;
  1237   00110A  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1238   00110C  6ED9               	movwf	fsr2l,c
  1239   00110E  6ADA               	clrf	fsr2h,c
  1240   001110  0E02               	movlw	2
  1241   001112  26D9               	addwf	fsr2l,f,c
  1242   001114  ACDF               	btfss	indf2,6,c
  1243   001116  D002               	bra	u675
  1244   001118  8E35               	bsf	__Motor_B^0,7,c
  1245   00111A  D001               	bra	u677
  1246   00111C                     u675:
  1247   00111C  9E35               	bcf	__Motor_B^0,7,c
  1248   00111E                     u677:
  1249   00111E                     
  1250                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 45:               _Motor_B[0].dirction=OUTPUT;
  1251   00111E  9C35               	bcf	__Motor_B^0,6,c
  1252                           
  1253                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 46:           };ECAL_layer/DC_MOTOR/ecu_dc_motor.c:
      +                           48:            {;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 49:                 _Motor_B[1].pi
      +                          n=dc_motor_config->Motor_B_PIN[1].M_pin;
  1254   001120  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1255   001122  6ED9               	movwf	fsr2l,c
  1256   001124  6ADA               	clrf	fsr2h,c
  1257   001126  0E03               	movlw	3
  1258   001128  26D9               	addwf	fsr2l,f,c
  1259   00112A  50DF               	movf	223,w,c
  1260   00112C  0B07               	andlw	7
  1261   00112E  6E2C               	movwf	??_dc_motor_intialize^0,c
  1262   001130  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1263   001132  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1264   001134  462C               	rlncf	??_dc_motor_intialize^0,f,c
  1265   001136  5036               	movf	(__Motor_B+1)^0,w,c
  1266   001138  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1267   00113A  0BC7               	andlw	-57
  1268   00113C  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1269   00113E  6E36               	movwf	(__Motor_B+1)^0,c
  1270                           
  1271                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 50:                _Motor_B[1].port=dc_motor_config
      +                          ->Motor_B_PIN[1].M_port;
  1272   001140  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1273   001142  6ED9               	movwf	fsr2l,c
  1274   001144  6ADA               	clrf	fsr2h,c
  1275   001146  0E03               	movlw	3
  1276   001148  26D9               	addwf	fsr2l,f,c
  1277   00114A  30DF               	rrcf	223,w,c
  1278   00114C  32E8               	rrcf	wreg,f,c
  1279   00114E  32E8               	rrcf	wreg,f,c
  1280   001150  0B07               	andlw	7
  1281   001152  6E2C               	movwf	??_dc_motor_intialize^0,c
  1282   001154  5036               	movf	(__Motor_B+1)^0,w,c
  1283   001156  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1284   001158  0BF8               	andlw	-8
  1285   00115A  182C               	xorwf	??_dc_motor_intialize^0,w,c
  1286   00115C  6E36               	movwf	(__Motor_B+1)^0,c
  1287                           
  1288                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 51:                _Motor_B[1].logic=dc_motor_confi
      +                          g->Motor_B_PIN[1].pin_state;
  1289   00115E  502A               	movf	dc_motor_intialize@dc_motor_config^0,w,c
  1290   001160  6ED9               	movwf	fsr2l,c
  1291   001162  6ADA               	clrf	fsr2h,c
  1292   001164  0E03               	movlw	3
  1293   001166  26D9               	addwf	fsr2l,f,c
  1294   001168  ACDF               	btfss	indf2,6,c
  1295   00116A  D002               	bra	u685
  1296   00116C  8E36               	bsf	(__Motor_B+1)^0,7,c
  1297   00116E  D001               	bra	u687
  1298   001170                     u685:
  1299   001170  9E36               	bcf	(__Motor_B+1)^0,7,c
  1300   001172                     u687:
  1301   001172                     
  1302                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 52:               _Motor_B[1].dirction=OUTPUT;
  1303   001172  9C36               	bcf	(__Motor_B+1)^0,6,c
  1304   001174  0E35               	movlw	low __Motor_B
  1305   001176  6E23               	movwf	gpio_pin_dirction_intialize@_pin_config^0,c
  1306   001178  ECDC  F008         	call	_gpio_pin_dirction_intialize	;wreg free
  1307   00117C                     
  1308                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 55:                 ret=gpio_pin_dirction_intialize
      +                          (&_Motor_B[1]);
  1309   00117C  0E36               	movlw	low (__Motor_B+1)
  1310   00117E  6E23               	movwf	gpio_pin_dirction_intialize@_pin_config^0,c
  1311   001180  ECDC  F008         	call	_gpio_pin_dirction_intialize	;wreg free
  1312   001184  6E2E               	movwf	dc_motor_intialize@ret^0,c
  1313                           
  1314                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 56:               break;
  1315   001186  EFDA  F008         	goto	l1328
  1316   00118A                     l1326:
  1317   00118A  502B               	movf	dc_motor_intialize@Motor_target^0,w,c
  1318   00118C  6E2C               	movwf	??_dc_motor_intialize^0,c
  1319   00118E  6A2D               	clrf	(??_dc_motor_intialize+1)^0,c
  1320                           
  1321                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1322                           ; Switch size 1, requested type "simple"
  1323                           ; Number of cases is 1, Range of values is 0 to 0
  1324                           ; switch strategies available:
  1325                           ; Name         Instructions Cycles
  1326                           ; simple_byte            4     3 (average)
  1327                           ;	Chosen strategy is simple_byte
  1328   001190  502D               	movf	(??_dc_motor_intialize+1)^0,w,c
  1329   001192  0A00               	xorlw	0	; case 0
  1330   001194  B4D8               	btfsc	status,2,c
  1331   001196  EFCF  F008         	goto	l1460
  1332   00119A  EF09  F008         	goto	l1294
  1333   00119E                     l1460:
  1334                           
  1335                           ; Switch size 1, requested type "simple"
  1336                           ; Number of cases is 2, Range of values is 0 to 1
  1337                           ; switch strategies available:
  1338                           ; Name         Instructions Cycles
  1339                           ; simple_byte            7     4 (average)
  1340                           ;	Chosen strategy is simple_byte
  1341   00119E  502C               	movf	??_dc_motor_intialize^0,w,c
  1342   0011A0  0A00               	xorlw	0	; case 0
  1343   0011A2  B4D8               	btfsc	status,2,c
  1344   0011A4  EF0D  F008         	goto	l1296
  1345   0011A8  0A01               	xorlw	1	; case 1
  1346   0011AA  B4D8               	btfsc	status,2,c
  1347   0011AC  EF66  F008         	goto	l1314
  1348   0011B0  EF09  F008         	goto	l1294
  1349   0011B4                     l1328:
  1350                           
  1351                           ;ECAL_layer/DC_MOTOR/ecu_dc_motor.c: 64:     return ret;
  1352   0011B4  502E               	movf	dc_motor_intialize@ret^0,w,c
  1353   0011B6  0012               	return		;funcret
  1354   0011B8                     __end_of_dc_motor_intialize:
  1355                           	callstack 0
  1356                           
  1357 ;; *************** function _gpio_pin_dirction_intialize *****************
  1358 ;; Defined at:
  1359 ;;		line 19 in file "ECAL_layer/PIC18f_MCAL_gpio.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  _pin_config     1    0[COMRAM] PTR const struct .
  1362 ;;		 -> _Motor_B(2), _Motor_A(2), button_intialize@button_pin(1), 
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;  ret             1    6[COMRAM] unsigned char 
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      unsigned char 
  1367 ;; Registers used:
  1368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1374 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1377 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1378 ;;Total ram usage:        7 bytes
  1379 ;; Hardware stack levels used: 1
  1380 ;; This function calls:
  1381 ;;		Nothing
  1382 ;; This function is called by:
  1383 ;;		_dc_motor_intialize
  1384 ;;		_button_intialize
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           	psect	text6
  1389   0011B8                     __ptext6:
  1390                           	callstack 0
  1391   0011B8                     _gpio_pin_dirction_intialize:
  1392                           	callstack 29
  1393   0011B8                     
  1394                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 20:     uint8_t ret=(STD_RetunType)0x01 ;
  1395   0011B8  0E01               	movlw	1
  1396   0011BA  6E29               	movwf	gpio_pin_dirction_intialize@ret^0,c
  1397                           
  1398                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 21:     if((_pin_config==((void*)0))||(_pin_config->pin>
      +                          7)||(_pin_config->port>5))
  1399   0011BC  5023               	movf	gpio_pin_dirction_intialize@_pin_config^0,w,c
  1400   0011BE  B4D8               	btfsc	status,2,c
  1401   0011C0  EFE4  F008         	goto	u521
  1402   0011C4  EFE6  F008         	goto	u520
  1403   0011C8                     u521:
  1404   0011C8  EF04  F009         	goto	l1250
  1405   0011CC                     u520:
  1406   0011CC  5023               	movf	gpio_pin_dirction_intialize@_pin_config^0,w,c
  1407   0011CE  6ED9               	movwf	fsr2l,c
  1408   0011D0  6ADA               	clrf	fsr2h,c
  1409   0011D2  30DF               	rrcf	223,w,c
  1410   0011D4  32E8               	rrcf	wreg,f,c
  1411   0011D6  32E8               	rrcf	wreg,f,c
  1412   0011D8  0B07               	andlw	7
  1413   0011DA  6E24               	movwf	??_gpio_pin_dirction_intialize^0,c
  1414   0011DC  0E08               	movlw	8
  1415   0011DE  6024               	cpfslt	??_gpio_pin_dirction_intialize^0,c
  1416   0011E0  EFF4  F008         	goto	u531
  1417   0011E4  EFF6  F008         	goto	u530
  1418   0011E8                     u531:
  1419   0011E8  EF04  F009         	goto	l1250
  1420   0011EC                     u530:
  1421   0011EC  5023               	movf	gpio_pin_dirction_intialize@_pin_config^0,w,c
  1422   0011EE  6ED9               	movwf	fsr2l,c
  1423   0011F0  6ADA               	clrf	fsr2h,c
  1424   0011F2  50DF               	movf	223,w,c
  1425   0011F4  0B07               	andlw	7
  1426   0011F6  6E24               	movwf	??_gpio_pin_dirction_intialize^0,c
  1427   0011F8  0E05               	movlw	5
  1428   0011FA  6424               	cpfsgt	??_gpio_pin_dirction_intialize^0,c
  1429   0011FC  EF02  F009         	goto	u541
  1430   001200  EF04  F009         	goto	u540
  1431   001204                     u541:
  1432   001204  EF5B  F009         	goto	l1258
  1433   001208                     u540:
  1434   001208                     l1250:
  1435                           
  1436                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 22:     {;ECAL_layer/PIC18f_MCAL_gpio.c: 23:         ret
      +                          =(STD_RetunType)0x00 ;
  1437   001208  0E00               	movlw	0
  1438   00120A  6E29               	movwf	gpio_pin_dirction_intialize@ret^0,c
  1439                           
  1440                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 25:     }
  1441   00120C  EF7B  F009         	goto	l1260
  1442   001210                     l1252:
  1443                           
  1444                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 31:          (*tris_reg[_pin_config->port]&=~((uint8_t)1
      +                           <<_pin_config->pin));
  1445   001210  5023               	movf	gpio_pin_dirction_intialize@_pin_config^0,w,c
  1446   001212  6ED9               	movwf	fsr2l,c
  1447   001214  6ADA               	clrf	fsr2h,c
  1448   001216  30DF               	rrcf	223,w,c
  1449   001218  32E8               	rrcf	wreg,f,c
  1450   00121A  32E8               	rrcf	wreg,f,c
  1451   00121C  0B07               	andlw	7
  1452   00121E  6E24               	movwf	??_gpio_pin_dirction_intialize^0,c
  1453   001220  0E01               	movlw	1
  1454   001222  6E25               	movwf	(??_gpio_pin_dirction_intialize+1)^0,c
  1455   001224  2A24               	incf	??_gpio_pin_dirction_intialize^0,f,c
  1456   001226  EF17  F009         	goto	u554
  1457   00122A                     u555:
  1458   00122A  90D8               	bcf	status,0,c
  1459   00122C  3625               	rlcf	(??_gpio_pin_dirction_intialize+1)^0,f,c
  1460   00122E                     u554:
  1461   00122E  2E24               	decfsz	??_gpio_pin_dirction_intialize^0,f,c
  1462   001230  EF15  F009         	goto	u555
  1463   001234  5025               	movf	(??_gpio_pin_dirction_intialize+1)^0,w,c
  1464   001236  0AFF               	xorlw	255
  1465   001238  6E26               	movwf	(??_gpio_pin_dirction_intialize+2)^0,c
  1466   00123A  5023               	movf	gpio_pin_dirction_intialize@_pin_config^0,w,c
  1467   00123C  6ED9               	movwf	fsr2l,c
  1468   00123E  6ADA               	clrf	fsr2h,c
  1469   001240  50DF               	movf	223,w,c
  1470   001242  0B07               	andlw	7
  1471   001244  0D02               	mullw	2
  1472   001246  50F3               	movf	243,w,c
  1473   001248  0F0B               	addlw	low _tris_reg
  1474   00124A  6ED9               	movwf	fsr2l,c
  1475   00124C  6ADA               	clrf	fsr2h,c
  1476   00124E  CFDE F027          	movff	postinc2,??_gpio_pin_dirction_intialize+3
  1477   001252  CFDD F028          	movff	postdec2,??_gpio_pin_dirction_intialize+4
  1478   001256  C027  FFD9         	movff	??_gpio_pin_dirction_intialize+3,fsr2l
  1479   00125A  C028  FFDA         	movff	??_gpio_pin_dirction_intialize+4,fsr2h
  1480   00125E  5026               	movf	(??_gpio_pin_dirction_intialize+2)^0,w,c
  1481   001260  16DF               	andwf	indf2,f,c
  1482                           
  1483                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 32:                 break;
  1484   001262  EF7B  F009         	goto	l1260
  1485   001266                     l1254:
  1486                           
  1487                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 34:               (*tris_reg[_pin_config->port]|=((uint8
      +                          _t)1 <<_pin_config->pin));
  1488   001266  5023               	movf	gpio_pin_dirction_intialize@_pin_config^0,w,c
  1489   001268  6ED9               	movwf	fsr2l,c
  1490   00126A  6ADA               	clrf	fsr2h,c
  1491   00126C  30DF               	rrcf	223,w,c
  1492   00126E  32E8               	rrcf	wreg,f,c
  1493   001270  32E8               	rrcf	wreg,f,c
  1494   001272  0B07               	andlw	7
  1495   001274  6E24               	movwf	??_gpio_pin_dirction_intialize^0,c
  1496   001276  0E01               	movlw	1
  1497   001278  6E25               	movwf	(??_gpio_pin_dirction_intialize+1)^0,c
  1498   00127A  2A24               	incf	??_gpio_pin_dirction_intialize^0,f,c
  1499   00127C  EF42  F009         	goto	u564
  1500   001280                     u565:
  1501   001280  90D8               	bcf	status,0,c
  1502   001282  3625               	rlcf	(??_gpio_pin_dirction_intialize+1)^0,f,c
  1503   001284                     u564:
  1504   001284  2E24               	decfsz	??_gpio_pin_dirction_intialize^0,f,c
  1505   001286  EF40  F009         	goto	u565
  1506   00128A  5023               	movf	gpio_pin_dirction_intialize@_pin_config^0,w,c
  1507   00128C  6ED9               	movwf	fsr2l,c
  1508   00128E  6ADA               	clrf	fsr2h,c
  1509   001290  50DF               	movf	223,w,c
  1510   001292  0B07               	andlw	7
  1511   001294  0D02               	mullw	2
  1512   001296  50F3               	movf	243,w,c
  1513   001298  0F0B               	addlw	low _tris_reg
  1514   00129A  6ED9               	movwf	fsr2l,c
  1515   00129C  6ADA               	clrf	fsr2h,c
  1516   00129E  CFDE F026          	movff	postinc2,??_gpio_pin_dirction_intialize+2
  1517   0012A2  CFDD F027          	movff	postdec2,??_gpio_pin_dirction_intialize+3
  1518   0012A6  C026  FFD9         	movff	??_gpio_pin_dirction_intialize+2,fsr2l
  1519   0012AA  C027  FFDA         	movff	??_gpio_pin_dirction_intialize+3,fsr2h
  1520   0012AE  5025               	movf	(??_gpio_pin_dirction_intialize+1)^0,w,c
  1521   0012B0  12DF               	iorwf	indf2,f,c
  1522   0012B2  EF04  F009         	goto	l1250
  1523   0012B6                     l1258:
  1524   0012B6  5023               	movf	gpio_pin_dirction_intialize@_pin_config^0,w,c
  1525   0012B8  6ED9               	movwf	fsr2l,c
  1526   0012BA  6ADA               	clrf	fsr2h,c
  1527   0012BC  BCDF               	btfsc	indf2,6,c
  1528   0012BE  EF63  F009         	goto	u571
  1529   0012C2  EF66  F009         	goto	u570
  1530   0012C6                     u571:
  1531   0012C6  0E01               	movlw	1
  1532   0012C8  EF67  F009         	goto	u580
  1533   0012CC                     u570:
  1534   0012CC  0E00               	movlw	0
  1535   0012CE                     u580:
  1536   0012CE  6E24               	movwf	??_gpio_pin_dirction_intialize^0,c
  1537   0012D0  6A25               	clrf	(??_gpio_pin_dirction_intialize+1)^0,c
  1538                           
  1539                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1540                           ; Switch size 1, requested type "simple"
  1541                           ; Number of cases is 1, Range of values is 0 to 0
  1542                           ; switch strategies available:
  1543                           ; Name         Instructions Cycles
  1544                           ; simple_byte            4     3 (average)
  1545                           ;	Chosen strategy is simple_byte
  1546   0012D2  5025               	movf	(??_gpio_pin_dirction_intialize+1)^0,w,c
  1547   0012D4  0A00               	xorlw	0	; case 0
  1548   0012D6  B4D8               	btfsc	status,2,c
  1549   0012D8  EF70  F009         	goto	l1462
  1550   0012DC  EF04  F009         	goto	l1250
  1551   0012E0                     l1462:
  1552                           
  1553                           ; Switch size 1, requested type "simple"
  1554                           ; Number of cases is 2, Range of values is 0 to 1
  1555                           ; switch strategies available:
  1556                           ; Name         Instructions Cycles
  1557                           ; simple_byte            7     4 (average)
  1558                           ;	Chosen strategy is simple_byte
  1559   0012E0  5024               	movf	??_gpio_pin_dirction_intialize^0,w,c
  1560   0012E2  0A00               	xorlw	0	; case 0
  1561   0012E4  B4D8               	btfsc	status,2,c
  1562   0012E6  EF08  F009         	goto	l1252
  1563   0012EA  0A01               	xorlw	1	; case 1
  1564   0012EC  B4D8               	btfsc	status,2,c
  1565   0012EE  EF33  F009         	goto	l1254
  1566   0012F2  EF04  F009         	goto	l1250
  1567   0012F6                     l1260:
  1568                           
  1569                           ;ECAL_layer/PIC18f_MCAL_gpio.c: 40:     return ret;
  1570   0012F6  5029               	movf	gpio_pin_dirction_intialize@ret^0,w,c
  1571   0012F8  0012               	return		;funcret
  1572   0012FA                     __end_of_gpio_pin_dirction_intialize:
  1573                           	callstack 0
  1574                           
  1575                           	psect	smallconst
  1576   001000                     __psmallconst:
  1577                           	callstack 0
  1578   001000  00                 	db	0
  1579   001001  00                 	db	0	; dummy byte at the end
  1580   000000                     
  1581                           	psect	rparam
  1582   000000                     
  1583                           	psect	config
  1584                           
  1585                           ; Padding undefined space
  1586   300000                     	org	3145728
  1587   300000  FF                 	db	255
  1588                           
  1589                           ;Config register CONFIG1H @ 0x300001
  1590                           ;	Oscillator Selection bits
  1591                           ;	OSC = HS, HS oscillator
  1592                           ;	Fail-Safe Clock Monitor Enable bit
  1593                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1594                           ;	Internal/External Oscillator Switchover bit
  1595                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1596   300001                     	org	3145729
  1597   300001  02                 	db	2
  1598                           
  1599                           ;Config register CONFIG2L @ 0x300002
  1600                           ;	Power-up Timer Enable bit
  1601                           ;	PWRT = OFF, PWRT disabled
  1602                           ;	Brown-out Reset Enable bits
  1603                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1604                           ;	Brown Out Reset Voltage bits
  1605                           ;	BORV = 1, 
  1606   300002                     	org	3145730
  1607   300002  09                 	db	9
  1608                           
  1609                           ;Config register CONFIG2H @ 0x300003
  1610                           ;	Watchdog Timer Enable bit
  1611                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1612                           ;	Watchdog Timer Postscale Select bits
  1613                           ;	WDTPS = 32768, 1:32768
  1614   300003                     	org	3145731
  1615   300003  1E                 	db	30
  1616                           
  1617                           ; Padding undefined space
  1618   300004                     	org	3145732
  1619   300004  FF                 	db	255
  1620                           
  1621                           ;Config register CONFIG3H @ 0x300005
  1622                           ;	CCP2 MUX bit
  1623                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1624                           ;	PORTB A/D Enable bit
  1625                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1626                           ;	Low-Power Timer1 Oscillator Enable bit
  1627                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1628                           ;	MCLR Pin Enable bit
  1629                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1630   300005                     	org	3145733
  1631   300005  81                 	db	129
  1632                           
  1633                           ;Config register CONFIG4L @ 0x300006
  1634                           ;	Stack Full/Underflow Reset Enable bit
  1635                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1636                           ;	Single-Supply ICSP Enable bit
  1637                           ;	LVP = OFF, Single-Supply ICSP disabled
  1638                           ;	Extended Instruction Set Enable bit
  1639                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1640                           ;	Background Debugger Enable bit
  1641                           ;	DEBUG = 0x1, unprogrammed default
  1642   300006                     	org	3145734
  1643   300006  81                 	db	129
  1644                           
  1645                           ; Padding undefined space
  1646   300007                     	org	3145735
  1647   300007  FF                 	db	255
  1648                           
  1649                           ;Config register CONFIG5L @ 0x300008
  1650                           ;	Code Protection bit
  1651                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  1652                           ;	Code Protection bit
  1653                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  1654                           ;	Code Protection bit
  1655                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  1656                           ;	Code Protection bit
  1657                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  1658   300008                     	org	3145736
  1659   300008  0F                 	db	15
  1660                           
  1661                           ;Config register CONFIG5H @ 0x300009
  1662                           ;	Boot Block Code Protection bit
  1663                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1664                           ;	Data EEPROM Code Protection bit
  1665                           ;	CPD = OFF, Data EEPROM not code-protected
  1666   300009                     	org	3145737
  1667   300009  C0                 	db	192
  1668                           
  1669                           ;Config register CONFIG6L @ 0x30000A
  1670                           ;	Write Protection bit
  1671                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  1672                           ;	Write Protection bit
  1673                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  1674                           ;	Write Protection bit
  1675                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  1676                           ;	Write Protection bit
  1677                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  1678   30000A                     	org	3145738
  1679   30000A  0F                 	db	15
  1680                           
  1681                           ;Config register CONFIG6H @ 0x30000B
  1682                           ;	Configuration Register Write Protection bit
  1683                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1684                           ;	Boot Block Write Protection bit
  1685                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1686                           ;	Data EEPROM Write Protection bit
  1687                           ;	WRTD = OFF, Data EEPROM not write-protected
  1688   30000B                     	org	3145739
  1689   30000B  E0                 	db	224
  1690                           
  1691                           ;Config register CONFIG7L @ 0x30000C
  1692                           ;	Table Read Protection bit
  1693                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  1694                           ;	Table Read Protection bit
  1695                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1696                           ;	Table Read Protection bit
  1697                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  1698                           ;	Table Read Protection bit
  1699                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  1700   30000C                     	org	3145740
  1701   30000C  0F                 	db	15
  1702                           
  1703                           ;Config register CONFIG7H @ 0x30000D
  1704                           ;	Boot Block Table Read Protection bit
  1705                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1706   30000D                     	org	3145741
  1707   30000D  40                 	db	64
  1708                           tosu	equ	0xFFF
  1709                           tosh	equ	0xFFE
  1710                           tosl	equ	0xFFD
  1711                           stkptr	equ	0xFFC
  1712                           pclatu	equ	0xFFB
  1713                           pclath	equ	0xFFA
  1714                           pcl	equ	0xFF9
  1715                           tblptru	equ	0xFF8
  1716                           tblptrh	equ	0xFF7
  1717                           tblptrl	equ	0xFF6
  1718                           tablat	equ	0xFF5
  1719                           prodh	equ	0xFF4
  1720                           prodl	equ	0xFF3
  1721                           indf0	equ	0xFEF
  1722                           postinc0	equ	0xFEE
  1723                           postdec0	equ	0xFED
  1724                           preinc0	equ	0xFEC
  1725                           plusw0	equ	0xFEB
  1726                           fsr0h	equ	0xFEA
  1727                           fsr0l	equ	0xFE9
  1728                           wreg	equ	0xFE8
  1729                           indf1	equ	0xFE7
  1730                           postinc1	equ	0xFE6
  1731                           postdec1	equ	0xFE5
  1732                           preinc1	equ	0xFE4
  1733                           plusw1	equ	0xFE3
  1734                           fsr1h	equ	0xFE2
  1735                           fsr1l	equ	0xFE1
  1736                           bsr	equ	0xFE0
  1737                           indf2	equ	0xFDF
  1738                           postinc2	equ	0xFDE
  1739                           postdec2	equ	0xFDD
  1740                           preinc2	equ	0xFDC
  1741                           plusw2	equ	0xFDB
  1742                           fsr2h	equ	0xFDA
  1743                           fsr2l	equ	0xFD9
  1744                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        34
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     16      56
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    dc_motor_intialize@dc_motor_config	PTR struct . size(1) Largest target is 4
		 -> Motor_1(COMRAM[4]), 

    dc_motor_move_left@dc_motor_config	PTR struct . size(1) Largest target is 4
		 -> Motor_1(COMRAM[4]), 

    dc_motor_move_right@dc_motor_config	PTR struct . size(1) Largest target is 4
		 -> Motor_1(COMRAM[4]), 

    dc_motor_stop@dc_motor_config	PTR struct . size(1) Largest target is 4
		 -> Motor_1(COMRAM[4]), 

    gpio_pin_dirction_intialize@_pin_config	PTR const struct . size(1) Largest target is 2
		 -> button_intialize@button_pin(COMRAM[1]), _Motor_A(COMRAM[2]), _Motor_B(COMRAM[2]), 

    gpio_pin_write_logic@_pin_config	PTR const struct . size(1) Largest target is 2
		 -> _Motor_A(COMRAM[2]), _Motor_B(COMRAM[2]), 

    lat_reg	PTR volatile unsigned char [5] size(2) Largest target is 4095
		 -> RAM(DATA[4095]), 

    port_reg	PTR volatile unsigned char [3] size(2) Largest target is 4095
		 -> RAM(DATA[4095]), 

    tris_reg	PTR volatile unsigned char [5] size(2) Largest target is 4095
		 -> RAM(DATA[4095]), 


Critical Paths under _main in COMRAM

    _main->_dc_motor_move_left
    _main->_dc_motor_move_right
    _main->_dc_motor_stop
    _dc_motor_stop->_gpio_pin_write_logic
    _dc_motor_move_right->_gpio_pin_write_logic
    _dc_motor_move_left->_gpio_pin_write_logic
    _dc_motor_intialize->_gpio_pin_dirction_intialize

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    8283
                                             13 COMRAM     3     3      0
                 _dc_motor_intialize
                 _dc_motor_move_left
                _dc_motor_move_right
                      _dc_motor_stop
 ---------------------------------------------------------------------------------
 (1) _dc_motor_stop                                        5     3      2    2402
                                              8 COMRAM     5     3      2
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (1) _dc_motor_move_right                                  5     3      2    2402
                                              8 COMRAM     5     3      2
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (1) _dc_motor_move_left                                   5     3      2    2250
                                              8 COMRAM     5     3      2
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_write_logic                                 8     6      2    2025
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _dc_motor_intialize                                   5     3      2    1222
                                              7 COMRAM     5     3      2
        _gpio_pin_dirction_intialize
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_dirction_intialize                          7     6      1     581
                                              0 COMRAM     7     6      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dc_motor_intialize
     _gpio_pin_dirction_intialize
   _dc_motor_move_left
     _gpio_pin_write_logic
   _dc_motor_move_right
     _gpio_pin_write_logic
   _dc_motor_stop
     _gpio_pin_write_logic

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBIGSFR           80      0       0      37        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     10      38       1       44.1%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      38      12        0.0%
DATA                 0      0      38       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Oct 27 10:27:58 2023

                                    l51 12F8                                      l75 1424  
                                   l137 1442                                     l158 11B6  
                                   l168 15F4                                     l178 167A  
                                   l188 156E                                     u520 11CC  
                                   u600 132E                                     u521 11C8  
                                   u601 132A                                     u530 11EC  
                                   u610 134A                                     u531 11E8  
                                   u611 1346                                     u540 1208  
                                   u700 14FA                                     u541 1204  
                                   u701 14F6                                     u710 1606  
                                   u711 1602                                     u640 1012  
                                   u624 1370                                     u641 100E  
                                   u625 136C                                     u570 12CC  
                                   u554 122E                                     u634 13C6  
                                   u571 12C6                                     u555 122A  
                                   u635 13C2                                     u580 12CE  
                                   u564 1284                                     u565 1280  
                                   u590 130E                                     u655 105E  
                                   u591 130A                                     u665 10B2  
                                   u657 1060                                     u737 1468  
                                   u690 1580                                     u675 111C  
                                   u667 10B4                                     u691 157C  
                                   u747 148C                                     u685 1170  
                                   u677 111E                                     u757 14B0  
                                   u687 1172                                     u767 14D4  
                                   wreg 0FE8                                    l1300 1060  
                                  l1310 10B6                                    l1302 1062  
                                  l1320 1174                                    l1312 10BE  
                                  l1304 1082                                    l1250 1208  
                                  l1322 117C                                    l1314 10CC  
                                  l1306 10A0                                    l1252 1210  
                                  l1260 12F6                                    l1244 11B8  
                                  l1316 111E                                    l1308 10B4  
                                  l1340 1588                                    l1420 1476  
                                  l1254 1266                                    l1246 11CC  
                                  l1318 1172                                    l1326 118A  
                                  l1270 130E                                    l1342 15A8  
                                  l1422 149A                                    l1248 11EC  
                                  l1328 11B4                                    l1272 132E  
                                  l1336 1570                                    l1360 1502  
                                  l1424 14A6                                    l1416 1426  
                                  l1258 12B6                                    l1282 13F8  
                                  l1274 134A                                    l1338 1580  
                                  l1346 15C8                                    l1362 1522  
                                  l1426 14CA                                    l1418 145E  
                                  l1460 119E                                    l1292 1002  
                                  l1276 1352                                    l1284 1422  
                                  l1268 12FA                                    l1380 160E  
                                  l1348 15F2                                    l1452 1556  
                                  l1356 14EA                                    l1462 12E0  
                                  l1294 1012                                    l1278 13A8  
                                  l1382 162E                                    l1454 15DC  
                                  l1358 14FA                                    l1366 1542  
                                  l1296 101A                                    l1456 1662  
                                  l1376 15F6                                    l1368 156C  
                                  l1298 1050                                    l1458 140C  
                                  l1378 1606                                    l1386 164E  
                                  l1388 1678            dc_motor_stop@dc_motor_config 002B  
        dc_motor_move_left@Motor_target 002C                                    _main 1426  
                                  fsr2h 0FDA                                    indf2 0FDF  
                                  fsr1l 0FE1                                    fsr2l 0FD9  
             dc_motor_stop@Motor_target 002C                                    prodl 0FF3  
                                  start 0000                            ___param_bank 0000  
        gpio_pin_dirction_intialize@ret 0029                    _gpio_pin_write_logic 12FA  
                                 ?_main 0023                                   _Motor 001B  
                                 tablat 0FF5                   dc_motor_intialize@ret 002E  
                                 status 0FD8                         __initialization 167C  
                          __end_of_main 14EA                   ?_gpio_pin_write_logic 0023  
                                ??_main 0030                           __activetblptr 0002  
gpio_pin_dirction_intialize@_pin_config 0023             __end_of_dc_motor_move_right 15F6  
                                isa$std 0001                            __pdataCOMRAM 0001  
     dc_motor_move_left@dc_motor_config 002B                            __mediumconst 0000  
                                tblptrh 0FF7                                  tblptrl 0FF6  
                                tblptru 0FF8                              __accesstop 0080  
               __end_of__initialization 16A8                           ___rparam_used 0001  
                ??_gpio_pin_write_logic 0025                          __pcstackCOMRAM 0023  
     dc_motor_intialize@dc_motor_config 002A                  button_read_state@F2933 0033  
   __end_of_gpio_pin_dirction_intialize 12FA             _gpio_pin_dirction_intialize 11B8  
                               __Hparam 0000                                 __Lparam 0000  
                               _Motor_1 001F                   dc_motor_move_left@ret 002F  
                          __psmallconst 1000                                 __pcinit 167C  
                               __ramtop 1000                                 __ptext0 1426  
                               __ptext1 14EA                                 __ptext2 1570  
                               __ptext3 15F6                                 __ptext4 12FA  
                               __ptext5 1002                                 __ptext6 11B8  
                               _lat_reg 0001                                 main@ret 0032  
                  end_of_initialization 16A8                           __Lmediumconst 0000  
                         _dc_motor_stop 14EA                                 postdec1 0FE5  
                               postdec2 0FDD                                 postinc0 0FEE  
                               postinc2 0FDE                          ?_dc_motor_stop 002B  
                         __pidataCOMRAM 16B2                     start_initialization 167C  
            __end_of_dc_motor_intialize 11B8              __end_of_dc_motor_move_left 167C  
                      dc_motor_stop@ret 002F                             __pbssCOMRAM 0033  
                       ??_dc_motor_stop 002D      dc_motor_move_right@dc_motor_config 002B  
       gpio_pin_write_logic@_pin_config 0023               gpio_pin_write_logic@logic 0024  
                           __smallconst 1000         dc_motor_move_right@Motor_target 002C  
               gpio_pin_write_logic@ret 002A                               copy_data0 1690  
                   _dc_motor_move_right 1570                                __Hrparam 0000  
                              __Lrparam 0000                                __Motor_A 0037  
                              __Motor_B 0035                    ?_dc_motor_move_right 002B  
                dc_motor_move_right@ret 002F                   button_intialize@F2927 0034  
                              isa$xinst 0000                      _dc_motor_intialize 1002  
                              _port_reg 0015                                _tris_reg 000B  
                 ??_dc_motor_move_right 002D                     ?_dc_motor_intialize 002A  
                    _dc_motor_move_left 15F6            __end_of_gpio_pin_write_logic 1426  
                   ?_dc_motor_move_left 002B            ?_gpio_pin_dirction_intialize 0023  
                  ??_dc_motor_intialize 002C          dc_motor_intialize@Motor_target 002B  
                  ??_dc_motor_move_left 002D           ??_gpio_pin_dirction_intialize 0024  
                 __end_of_dc_motor_stop 1570  
